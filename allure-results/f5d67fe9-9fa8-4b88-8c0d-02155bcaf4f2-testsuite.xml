<ns0:test-suite xmlns:ns0="urn:model.allure.qatools.yandex.ru" start="1656645253646" stop="1656645257283">
  <name>test_seven</name>
  <labels/>
  <test-cases>
    <test-case start="1656645253646" status="failed" stop="1656645257283">
      <name>test_actions</name>
      <failure>
        <message>SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 101
Current browser version is 103.0.5060.66 with binary path C:\Program Files (x86)\Google\Chrome\Application\chrome.exe
Stacktrace:
Backtrace:
	Ordinal0 [0x0077B8F3+2406643]
	Ordinal0 [0x0070AF31+1945393]
	Ordinal0 [0x005FC748+837448]
	Ordinal0 [0x0061C8B3+968883]
	Ordinal0 [0x006184BA+951482]
	Ordinal0 [0x00615D71+941425]
	Ordinal0 [0x00648EE0+1150688]
	Ordinal0 [0x00648B3A+1149754]
	Ordinal0 [0x00644096+1130646]
	Ordinal0 [0x0061E636+976438]
	Ordinal0 [0x0061F546+980294]
	GetHandleVerifier [0x009E9612+2498066]
	GetHandleVerifier [0x009DC920+2445600]
	GetHandleVerifier [0x00814F2A+579370]
	GetHandleVerifier [0x00813D36+574774]
	Ordinal0 [0x00711C0B+1973259]
	Ordinal0 [0x00716688+1992328]
	Ordinal0 [0x00716775+1992565]
	Ordinal0 [0x0071F8D1+2029777]
	BaseThreadInitThunk [0x7660FA29+25]
	RtlGetAppContainerNamedObjectPath [0x777D7A9E+286]
	RtlGetAppContainerNamedObjectPath [0x777D7A6E+238]
</message>
        <stack-trace>def test_actions():
    
&gt;       driver = webdriver.Chrome(executable_path="C:\\chromedriver_win32\\chromedriver.exe")

test_seven.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\pythonProject\venv\lib\site-packages\selenium\webdriver\chrome\webdriver.py:70: in __init__
    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], "goog",
..\pythonProject\venv\lib\site-packages\selenium\webdriver\chromium\webdriver.py:92: in __init__
    RemoteWebDriver.__init__(
..\pythonProject\venv\lib\site-packages\selenium\webdriver\remote\webdriver.py:275: in __init__
    self.start_session(capabilities, browser_profile)
..\pythonProject\venv\lib\site-packages\selenium\webdriver\remote\webdriver.py:365: in start_session
    response = self.execute(Command.NEW_SESSION, parameters)
..\pythonProject\venv\lib\site-packages\selenium\webdriver\remote\webdriver.py:430: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018EF9FB92B0&gt;
response = {'status': 500, 'value': '{"value":{"error":"session not created","message":"session not created: This version of Chro...\n\\tRtlGetAppContainerNamedObjectPath [0x777D7A9E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x777D7A6E+238]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 101
E       Current browser version is 103.0.5060.66 with binary path C:\Program Files (x86)\Google\Chrome\Application\chrome.exe
E       Stacktrace:
E       Backtrace:
E       	Ordinal0 [0x0077B8F3+2406643]
E       	Ordinal0 [0x0070AF31+1945393]
E       	Ordinal0 [0x005FC748+837448]
E       	Ordinal0 [0x0061C8B3+968883]
E       	Ordinal0 [0x006184BA+951482]
E       	Ordinal0 [0x00615D71+941425]
E       	Ordinal0 [0x00648EE0+1150688]
E       	Ordinal0 [0x00648B3A+1149754]
E       	Ordinal0 [0x00644096+1130646]
E       	Ordinal0 [0x0061E636+976438]
E       	Ordinal0 [0x0061F546+980294]
E       	GetHandleVerifier [0x009E9612+2498066]
E       	GetHandleVerifier [0x009DC920+2445600]
E       	GetHandleVerifier [0x00814F2A+579370]
E       	GetHandleVerifier [0x00813D36+574774]
E       	Ordinal0 [0x00711C0B+1973259]
E       	Ordinal0 [0x00716688+1992328]
E       	Ordinal0 [0x00716775+1992565]
E       	Ordinal0 [0x0071F8D1+2029777]
E       	BaseThreadInitThunk [0x7660FA29+25]
E       	RtlGetAppContainerNamedObjectPath [0x777D7A9E+286]
E       	RtlGetAppContainerNamedObjectPath [0x777D7A6E+238]

..\pythonProject\venv\lib\site-packages\selenium\webdriver\remote\errorhandler.py:247: SessionNotCreatedException</stack-trace>
      </failure>
      <attachments/>
      <labels>
        <label name="severity" value="normal"/>
        <label name="thread" value="17212-MainThread"/>
        <label name="host" value="LAPTOP-KKOEBFM8"/>
        <label name="framework" value="pytest"/>
        <label name="language" value="cpython3"/>
      </labels>
      <steps/>
    </test-case>
  </test-cases>
</ns0:test-suite>
